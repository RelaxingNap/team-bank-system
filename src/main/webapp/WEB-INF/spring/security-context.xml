<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 652쪽 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<bean id="loginFailHandler" class="com.klk.bank.handler.LoginFailHandler"></bean>
	<bean id="accessFailHandler" class="com.klk.bank.handler.AccessFailHandler"></bean>
	<security:http>
		<security:csrf disabled="true" />
		<!-- 
		<security:form-login />
	    <security:form-login always-use-default-target="true" login-page="/user/login" default-target-url="/home" />
		<security:logout logout-url="/logout" logout-success-url="/user/login" invalidate-session="true"/>
		 -->
		
		<!-- 로그인 핸들러 -->
	    <security:form-login username-parameter="username"
							password-parameter="password" 
							always-use-default-target="true" 
							login-processing-url="/user/login" 
							login-page="/user/login" 
							default-target-url="/" 
							authentication-failure-handler-ref="loginFailHandler"/>
		<security:logout logout-url="/logout" logout-success-url="/user/login" invalidate-session="true" delete-cookies="true"/>
		<security:access-denied-handler ref="accessFailHandler"/>
		
		
	    <!-- 
		<security:remember-me/>
		
		access 속성 작성 법 (673~674)	
		게시글 권한 설정 create, update, delete
		<security:intercept-url pattern="/board/insert" access="isAuthenticated()"/>
		<security:intercept-url pattern="/board/modify" access="isAuthenticated()"/>
		<security:intercept-url pattern="/board/delete" access="isAuthenticated()"/>
		
		댓글 권한 설정 create, update, delete
		<security:intercept-url pattern="/reply/insert" access="isAuthenticated()"/>
		<security:intercept-url pattern="/reply/modify" access="isAuthenticated()"/>
		<security:intercept-url pattern="/reply/delete" access="isAuthenticated()"/>
		
		회원정보 권한 설정 read, update, delete
		<security:intercept-url pattern="/member/initpw"  access="hasRole('ADMIN')"/>
		 -->
		
		<!-- 상품정보 등록/수정/삭제 권한 관련 설정(총괄 관리자, 상품정보 관리자에게만 권한 부여) --> 
		<security:intercept-url pattern="/user/list" access="hasAnyRole('ADMIN, PRODUCT, SERVICE')"/>
		<security:intercept-url pattern="/user/info" access="isAuthenticated()"/>
		<security:intercept-url pattern="/user/modify" access="isAuthenticated()"/>
		<security:intercept-url pattern="/user/remove" access="isAuthenticated()"/>
		
		<!-- 상품정보 등록/수정/삭제 권한 관련 설정(총괄 관리자, 상품정보 관리자에게만 권한 부여) -->
		<security:intercept-url pattern="/product/registration" access="hasAnyRole('ADMIN, PRODUCT')"/>
		<security:intercept-url pattern="/product/edit" access="hasAnyRole('ADMIN, PRODUCT')"/>
		<security:intercept-url pattern="/product/remove" access="hasAnyRole('ADMIN, PRODUCT')"/>
		
		<!-- 계좌정보 등록/수정/삭제 권한 관련 설정(총괄 관리자, 해당유저에게만 권한 부여) -->
		<security:intercept-url pattern="/account/account_list" access="hasAnyRole('ADMIN, PRODUCT, SERVICE')"/>
		<security:intercept-url pattern="/account/account_get" access="isAuthenticated()"/>
		<security:intercept-url pattern="/account/account_modify" access="isAuthenticated()"/>
		<security:intercept-url pattern="/account/account_remove" access="isAuthenticated()"/>
		<security:intercept-url pattern="/account/account_history" access="isAuthenticated()"/>
		<security:intercept-url pattern="/account/{account_num}" access="isAuthenticated()"/>
		
	</security:http>
	
	<!-- 1. 인증 2. 권한 체크 -->
	<!-- root-context.xml에 있는 dataSource를 사용 -->
	<!-- username에 해당하는것 : id -->
	<!-- users-by-username-query를 작성 -->
	<!-- username, password, 사용가능한지 여부를 쿼리로 작성 -->
	<!-- authorities-by-username-query를 작성 -->
	<!-- 권한정보를 세팅하기위한 쿼리 작성 -->
	
	 <security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="
					SELECT user_id, user_pw, 1
					FROM User
					WHERE user_id = ?
				"
				authorities-by-username-query="
					SELECT user_id, role
					FROM Auth
					WHERE user_id = ?
				"
			/> 
		</security:authentication-provider>
		
	</security:authentication-manager>
	
</beans>
